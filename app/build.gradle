apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId "com.android.mvvmsample"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName "${versions.versionName}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'win32-x86-64/attach_hotspot_windows.dll'
        exclude 'win32-x86/attach_hotspot_windows.dll'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/licenses/ASM'
    }
}

dependencies {
    implementation project(path: ':data')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "androidx.core:core-ktx:${versions.core_ktx}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "com.android.support:recyclerview-v7:${versions.recyclerview}"

    // Jetpack navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    // Dagger 2
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"

    // Glide
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${versions.glide}"

    // Loading shimmer effect
    implementation "com.facebook.shimmer:shimmer:${versions.shimmerlayout}"

    // Testing
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.test_junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}" // RecyclerViewActions
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitokotlin}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockitoandroid}"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutinestest}"
    androidTestImplementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    androidTestImplementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${versions.uiautomator}"
    androidTestImplementation('com.schibsted.spain:barista:3.7.0') {
        exclude group: 'org.jetbrains.kotlin'
    }

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitokotlin}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutinestest}"
    testImplementation "androidx.arch.core:core-testing:${versions.archcoretesting}"
}
